{"meta":{"title":"Hexo","subtitle":"","description":"Test description","author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"Hexo","date":"2020-04-15T13:44:33.000Z","updated":"2020-04-15T13:44:33.511Z","comments":true,"path":"Hexo/index.html","permalink":"http://yoursite.com/Hexo/index.html","excerpt":"","text":""},{"title":"categories","date":"2020-04-15T14:01:55.000Z","updated":"2020-04-15T14:01:55.219Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"数据结构","date":"2020-04-15T13:16:13.000Z","updated":"2020-04-15T13:16:13.328Z","comments":true,"path":"数据结构/index.html","permalink":"http://yoursite.com/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.html","excerpt":"","text":""},{"title":"关于我","date":"2020-04-15T12:58:00.000Z","updated":"2020-04-15T13:05:01.690Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"我是YInkit，一名来自深圳的学生，很高兴你长这么帅还愿意关注我。"}],"posts":[{"title":"树","slug":"树","date":"2020-04-15T13:17:28.000Z","updated":"2020-04-15T14:08:08.807Z","comments":true,"path":"2020/04/15/树/","link":"","permalink":"http://yoursite.com/2020/04/15/%E6%A0%91/","excerpt":"树的学习笔记ing…","text":"树的学习笔记ing… 树一、树结构概述二、二叉树2.1、什么是二叉树二叉树：任何一个节点的子节点数量不超过2 叉树的子节点分为左节点和右节点 2.1.1满二叉树满二叉树：所有叶子节点都在最后一层，而且所有节点的总数为2^n-1（n为树的高度） 2.1.2完全二叉树完全二叉树：所有叶子节点都在最后一层或倒数第二层，且最后一层的叶子结点在左边连续，倒数第二节点的叶子结点在右边连续 注：满二叉树一定是完全二叉树 2.2、链式存储的二叉树 创建二叉树、添加节点 树的遍历 查找节点：前序查找、中序查找、后序查找 删除节点 代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546public class BinaryTree &#123; TreeNode root; //设置根节点 public void setRoot(TreeNode root) &#123; this.root = root; &#125; //获取根节点 public TreeNode getRoot() &#123; return root; &#125; public void frontShow() &#123; if(root!=null) &#123; root.frontShow(); &#125; &#125; public void midShow() &#123; if(root!=null) &#123; root.midShow(); &#125; &#125; public void afterShow() &#123; if(root!=null) &#123; root.afterShow(); &#125; &#125; public TreeNode frontSearch(int i) &#123; return root.frontSearch(i); &#125; public void delete(int i) &#123; if(root.value==i) &#123; root=null; &#125;else &#123; root.delete(i); &#125; &#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110public class TreeNode &#123; //节点的权 int value; //左儿子 TreeNode leftNode; //右儿子 TreeNode rightNode; public TreeNode(int value) &#123; this.value=value; &#125; //设置左二子 public void setLeftNode(TreeNode leftNode) &#123; this.leftNode = leftNode; &#125; //设置右儿子 public void setRightNode(TreeNode rightNode) &#123; this.rightNode = rightNode; &#125; //前序遍历 public void frontShow() &#123; //先遍历当前节点的内容 System.out.println(value); //左节点 if(leftNode!=null) &#123; leftNode.frontShow(); &#125; //右节点 if(rightNode!=null) &#123; rightNode.frontShow(); &#125; &#125; //中序遍历 public void midShow() &#123; //左节点 if(leftNode!=null) &#123; leftNode.midShow(); &#125; //当前节点的内容 System.out.println(value); //右节点 if(rightNode!=null) &#123; rightNode.midShow(); &#125; &#125; public void afterShow() &#123; //左节点 if(leftNode!=null) &#123; leftNode.afterShow(); &#125; //右节点 if(rightNode!=null) &#123; rightNode.afterShow(); &#125; //当前节点的内容 System.out.println(value); &#125; //前序查找 public TreeNode frontSearch(int i) &#123; TreeNode target=null; //对比当前节点的值 if(this.value==i) &#123; return this; //当前节点的值不是要查找的节点 &#125;else &#123; //查找左儿子 if(leftNode!=null) &#123; //有可能可以查到，也可能查不到 target = leftNode.frontSearch(i); &#125; //如果不为空，说明在左儿子中已经找到 if(target!=null) &#123; return target; &#125; //查找右儿子 if(rightNode!=null) &#123; target=rightNode.frontSearch(i); &#125; &#125; return target; &#125; //删除一个子树 public void delete(int i) &#123; TreeNode parent = this; //判断左儿子 if(parent.leftNode!=null&amp;&amp;parent.leftNode.value==i) &#123; parent.leftNode=null; return; &#125; //判断右儿子 if(parent.rightNode!=null&amp;&amp;parent.rightNode.value==i) &#123; parent.rightNode=null; return; &#125; //递归检查并删除左儿子 parent=leftNode; if(parent!=null) &#123; parent.delete(i); &#125; //递归检查并删除右儿子 parent=rightNode; if(parent!=null) &#123; parent.delete(i); &#125; &#125; 123456789101112131415161718192021222324252627282930313233343536373839//测试类public class TestBinaryTree &#123; public static void main(String[] args) &#123; //创建一棵树 BinaryTree binTree = new BinaryTree(); //创建一个根节点 TreeNode root = new TreeNode(1); //把根节点赋给树 binTree.setRoot(root); //创建一个左节点 TreeNode rootL = new TreeNode(2); //把新创建的节点设置为根节点的子节点 root.setLeftNode(rootL); //创建一个右节点 TreeNode rootR = new TreeNode(3); //把新创建的节点设置为根节点的子节点 root.setRightNode(rootR); //为第二层的左节点创建两个子节点 rootL.setLeftNode(new TreeNode(4)); rootL.setRightNode(new TreeNode(5)); //为第二层的右节点创建两个子节点 rootR.setLeftNode(new TreeNode(6)); rootR.setRightNode(new TreeNode(7)); //前序遍历树 binTree.frontShow(); System.out.println(\"----------\"); //中序遍历 binTree.midShow(); System.out.println(\"----------\"); //后序遍历 binTree.afterShow(); //前序查找 TreeNode result = binTree.frontSearch(3); System.out.println(result); //删除一个节点 binTree.delete(4); binTree.frontShow(); &#125;&#125; 2.3、顺序存储的二叉树","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"搭建博客","slug":"十分钟快速搭建个人博客","date":"2020-04-13T13:17:28.000Z","updated":"2020-04-15T14:08:17.267Z","comments":true,"path":"2020/04/13/十分钟快速搭建个人博客/","link":"","permalink":"http://yoursite.com/2020/04/13/%E5%8D%81%E5%88%86%E9%92%9F%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","excerpt":"通过Hexo+GitHub，快速搭建Blog！","text":"通过Hexo+GitHub，快速搭建Blog！ 准备工作 安装Node.js点击此处进入官网下载，进行安装即可。 安装Git点击此处进入官网下载，进行安装即可。 验证Node.js和Git是否安装成功通过运行命令（win+R）,输入cmd。可以通过node -v的命令来测试Node.JS是否安装成功可以通过git --version的命令来测试Git是否安装成功 安装Hexo创建一个文件夹，命名随意，进入文件夹后，右键选择“Git Bash here”。输入命令行，安装： 1npm install -g hexo-cli 查看一下版本: 1hexo -v 接下来初始化一下hexo 12//这个myblog可以自己取什么名字都行hexo init myblog 12//进入这个myblog文件夹cd myblog 1npm install 新建完成后，指定文件夹目录下有： node_modules: 依赖包public：存放生成的页面scaffolds：生成文章的一些模板source：用来存放你的文章themes：主题_config.yml: 博客的配置文件 打开hexo的服务，在浏览器输入localhost:4000就可以看到你生成的博客了 12hexo ghexo server 注册Github点击此处进入官网进行注册：注册好后，点击右上角的“New repository”创建一个新的仓库输入仓库名：你的Github用户名.github.io。然后点击‘’Create repository”。 特别注意的是：你的仓库名一定要和你的github用户名一模一样，不然后面会显示不出来。 接着进入刚刚创建好的仓库，点击右上角的“setting”点击选择模板随便选择一个模板即可（因为我们后面要使用hexo的模板）：现在打开你刚刚创建的github的静态网址：用户名.github.io，你会发现，就是你刚刚选择的模板页面。 在 Github 上添加 SSH key 配置SSH Key 打开命令行输入 1cd ~/.ssh 如果没报错或者提示什么的说明就是以前生成过的，直接使用命令就可以查看本机上的 SSH key 了。 12//xx指生成的秘钥文件名cat ~/.ssh/xx.pub 如果之前没有生成过SSH，就按照下面的方法生成。首先先登录一下。在命令行输入下面的指令，用户名和邮箱填写你自己真实的信息。 12git config --global user.name \"用户名\"git config --global user.email \"邮箱地址\" 然后就开始生成密钥 1ssh-keygen -t rsa -C '上面填写的邮箱地址' 根据提示按三次回车就会生成你电脑的SSH密钥，将其复制下来。首次使用的话还要确认并添加到可信任列表，输入下列指令： 1ssh -T git@github.com 最后在.ssh目录下(C盘用户文件夹下)得到了两个文件：xx（私有秘钥）和xx.pub（公有密钥） 部署到Github回到github，点击右上角头像，选择”Settings”点击左下栏的”SSH and GPG keys”点击“New SSH key”将秘钥用笔记本打开，复制到“key”中直接点击“Add SSH key”添加即可，标题不用写。 将本地部署到GitHub 将Hexo和GitHub关联起来将hexo生成的文章部署到GitHub上，打开站点配置文件 _config.yml，翻到最后，修改为szyinkit24就是你的GitHub账户 1234deploy: type: git repo: https://github.com/szyinkit24/szyinkit24.github.io.git branch: master 部署到Github这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。 1npm install hexo-deployer-git --save 123hexo cleanhexo generatehexo deploy hexo clean 清除了你之前生成的东西，可以不加。 hexo generate 生成静态文章，可以缩写为 hexo ghexo deploy 部署文章，可以缩写为 hexo d 注意deploy时可能要你输入username和password。 过一会儿就可以在 http://用户名.github.io 这个网站看到你的博客了！！ 开始创作这种博客写作的时候特别容易，也是使用Markdown写的。如果不会用这种语法可以百度，用CSDN自带的文章编辑器也可以。新建文章有两种方法，第一种是执行下面的指令： 1hexo new '你想起的文章标题' 执行完以后你就会在/souce/-posts 文件夹下看到一个“你想起的文章标题.md”的文件了 第二种方法就是直接在/souce/-posts 文件夹下新建一个文本文档，命名为“文章标题.md”，这种方法是比较简单的。 文章编辑好了以后，再执行以下指令就可以了 12hexo cleanhexo g -d 稍等一会你就能看见你的文章了！！！","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]}],"categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]}